//+------------------------------------------------------------------+
//|              CM_Williams_VixFix_Stoch_Trader.mq4                 |
//+------------------------------------------------------------------+
#property strict


extern double LotSize = 0.10;
int pd = 22;
int bbl = 20;
double mult = 2.0;
int lb = 50;
double ph = 0.85;

int kLength = 5;
int kSmoothing = 3;
int dSmoothing = 3;

datetime lastCandleTime = 0;


//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   lastCandleTime = 0;
   return(INIT_SUCCEEDED);
}


//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Only run logic once per new M5 candle
    if (Period() != PERIOD_M5) return;

    datetime currentTime = Time[0];
    if (currentTime == lastCandleTime) return;

    lastCandleTime = currentTime;
   
   
    // Start of CM Williams
    
    int pos = 1;    
    int limit = Bars;
    
    // wvf1
    
    double wvfHolder[]; GetWVf(wvfHolder,limit);
    double wvf = 100 * (GetHighestClose(pd, pos) - Low[pos]) / GetHighestClose(pd, pos);
    double midLine = SimpleMA(wvfHolder, pos, bbl);
    double sDev = mult * CalculateStd(wvfHolder, pos, bbl, midLine);
    double lowerBand = midLine - sDev;        
    double upperBand = midLine + sDev; 
    double rangeHigh = ph * GetWvfHighest(wvfHolder, pos, lb);
    
    bool cmsLongCondition = wvf >= upperBand || wvf >= rangeHigh;
    
    // wvf1
    
    double wvf1Holder[]; GetWVf1(wvf1Holder, limit);
    double wvf1 = 100 * (GetLowestClose(pd, pos) - High[pos]) / GetLowestClose(pd, pos);
    double midLine1 = SimpleMA(wvf1Holder, pos, bbl);
    double sDev1 = mult * CalculateStd(wvf1Holder, pos, bbl, midLine1);
    double lowerBand1 = midLine1 - sDev1;        
    double upperBand1 = midLine1 + sDev1;
    double rangeLow1 = ph * GetWvf1Lowest(wvf1Holder, pos, lb);

    bool cmsShortCondition = wvf1 <= lowerBand1 || wvf1 <= rangeLow1;
    
    // Start of Stochastic
    
    double k15_prev = iStochastic(Symbol(), PERIOD_M15, kLength, kSmoothing, dSmoothing, MODE_SMA, 0, MODE_MAIN, 1);
    double d15_prev = iStochastic(Symbol(), PERIOD_M15, kLength, kSmoothing, dSmoothing, MODE_SMA, 0, MODE_SIGNAL, 1);

    double k15 = iStochastic(Symbol(), PERIOD_M15, kLength, kSmoothing, dSmoothing, MODE_SMA, 0, MODE_MAIN, 0);
    double d15 = iStochastic(Symbol(), PERIOD_M15, kLength, kSmoothing, dSmoothing, MODE_SMA, 0, MODE_SIGNAL, 0);

    // Stochastic Confirmation Conditions
    bool stochLongCondition = (k15 < 20 && d15 < 20 && k15_prev < d15_prev && k15 > d15);
    bool stochShortCondition = (k15 > 80 && d15 > 80 && k15_prev > d15_prev && k15 < d15);
    

    if (cmsLongCondition && stochLongCondition)
    {
        Print("Long Condition Met - Closing Shorts and Opening BUY");
        CloseOrders(OP_SELL); // Close all shorts first
        Sleep(1000); // Short pause to ensure closure is processed
        OrderSend(Symbol(), OP_BUY, LotSize, Ask, 3, 0, 0, "VixFix Buy", 0, 0, clrGreen);
    }
    else if (cmsShortCondition && stochShortCondition)
    {
        Print("Short Condition Met - Closing Longs and Opening SELL");
        CloseOrders(OP_BUY); // Close all longs first
        Sleep(1000); // Short pause to ensure closure is processed
        OrderSend(Symbol(), OP_SELL, LotSize, Bid, 3, 0, 0, "VixFix Sell", 0, 0, clrRed);
    }
}



//+------------------------------------------------------------------+
// GetHighestClose given len bars backward from pos                   |
//+------------------------------------------------------------------+
double GetHighestClose(int len, int pos)
{
    return Close[iHighest(NULL, 0, MODE_CLOSE, len, pos)];
}



//+------------------------------------------------------------------+
// GetLowestClose given len bars backward from pos                   |
//+------------------------------------------------------------------+
double GetLowestClose(int len, int pos)
{
    return Close[iLowest(NULL, 0, MODE_CLOSE, len, pos)];
}


//+------------------------------------------------------------------+
// CloseOrders given specific  orderType                             |
//+------------------------------------------------------------------+
void CloseOrders(int orderType)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderType() == orderType && OrderSymbol() == Symbol())
            {
                if (orderType == OP_BUY)
                    OrderClose(OrderTicket(), OrderLots(), Bid, 3, clrRed);
                else if (orderType == OP_SELL)
                    OrderClose(OrderTicket(), OrderLots(), Ask, 3, clrGreen);
            }
        }
    }
}


//+------------------------------------------------------------------+
// Original code to find bottom : wvf                                |
//+------------------------------------------------------------------+
void GetWVf(double &output[], int pos)
{
   ArrayResize(output, pos); 
   double Max, wvf;

   while (pos >= 0)
   {
      Max = Close[iHighest(NULL, 0, MODE_CLOSE, pd, pos)];
      wvf = 100 * (Max - Low[pos]) / Max;
      output[pos] = wvf;
      pos--;
   }
}


//+------------------------------------------------------------------+
// Original code to find top : wvf1                                  |
//+------------------------------------------------------------------+
void GetWVf1(double &output[], int pos)
{
   ArrayResize(output, pos); 
   double Lw, wvf1;

   while (pos >= 0)
   {
      Lw = Close[iLowest(NULL, 0, MODE_CLOSE, pd, pos)];
      wvf1 = 100 * (Lw - High[pos]) / Lw;
      output[pos] = wvf1;
      pos--;
   }
}


//+------------------------------------------------------------------+
//| Simple Moving Average                                            |
//+------------------------------------------------------------------+
double SimpleMA(double &src[], int pos, int length)
{
   double sum = 0;
   for (int i = 0; i < length; i++)
   {
      sum += src[pos + i];
   }
   return sum / length;
}

//+------------------------------------------------------------------+
//| Calculate Standard Deviation                                     |
//+------------------------------------------------------------------+
double CalculateStd(double &src[], int pos, int length, double avg)
{

   double sum = 0;
   double sumSquaredDiffs = 0;

   // Summation (Xi - X)^2
   for (int j = 0; j < length; j++) {
      double diff = src[pos + j] - avg;
      sumSquaredDiffs += diff * diff;
   }
   
   return MathSqrt(sumSquaredDiffs / length);
   
}


//+------------------------------------------------------------------+
// Get wvf Highest given lenght bars back                                |
//+------------------------------------------------------------------+
double GetWvfHighest(double &src[], int pos, int length)
{
   double highest = 0;
   for (int i = 0; i < length; i++)
   {
      if (src[pos + i] > highest)
         highest = src[pos + i];      
   }
   return highest;
}

//+------------------------------------------------------------------+
// Get wvf1 Lowest given lenght bars back                                |
//+------------------------------------------------------------------+
double GetWvf1Lowest(double &src[], int pos, int length)
{
   double lowest = src[pos];
   for (int i = 0; i < length; i++)
   {
      if (src[pos + i] < lowest)
         lowest = src[pos + i];      
   }
   return lowest;
}

