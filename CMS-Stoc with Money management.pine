//@version=5
strategy("Stochastic Long Strategy (15m TF) with Proper Position Management", overlay=true)

// === Settings ===
kLength = 5
kSmoothing = 3
dSmoothing = 3
stochTF = "15"

// === Start of Stochastic Calculation ===
f_stoch(srcHigh, srcLow, srcClose) =>
    k = ta.sma(ta.stoch(srcClose, srcHigh, srcLow, kLength), kSmoothing)
    d = ta.sma(k, dSmoothing)
    [k, d]

[k15, d15] = request.security(syminfo.tickerid, stochTF, f_stoch(high, low, close))

// === Stochastic Conditions ===
stochLongCondition = (k15 < 20) and (d15 < 20) and ta.crossover(k15, d15)
stochShortCondition = (k15 > 80) and (d15 > 80) and ta.crossunder(k15, d15)

// === Plot the Stochastic Lines ===
//plot(k15, title="%K 15m", color=color.blue)
//plot(d15, title="%D 15m", color=color.red)

// === End of Stochastic Calculation ===

// === Start of M_Williams_Vix_Fix - Market Top and Bottom ===
pd = input(22, title="LookBack Period Standard Deviation High")
bbl = input(20, title="Bollinger Band Length")
mult = input.float(2.0, minval=1, maxval=5, title="Bollinger Band Standard Deviation Up")
lb = input(50, title="Look Back Period Percentile High")
ph = input(.85, title="Percentile - 0.90=90%, 0.95=95%, 0.99=99%")

wvf = ((ta.highest(close, pd) - low) / (ta.highest(close, pd))) * 100
sDev = mult * ta.stdev(wvf, bbl)
midLine = ta.sma(wvf, bbl)
lowerBand = midLine - sDev
upperBand = midLine + sDev
rangeHigh = (ta.highest(wvf, lb)) * ph

wvf1 = ((ta.lowest(close, pd) - high) / (ta.lowest(close, pd))) * 100
sDev1 = mult * ta.stdev(wvf1, bbl)
midLine1 = ta.sma(wvf1, bbl)
lowerBand1 = midLine1 - sDev1
upperBand1 = midLine1 + sDev1
rangeLow1 = (ta.lowest(wvf1, lb)) * ph

cmsLongCondition = wvf >= upperBand or wvf >= rangeHigh
cmsShortCondition = wvf1 <= lowerBand1 or wvf1 <= rangeLow1

// === End of M_Williams_Vix_Fix - Market Top and Bottom ===

// === Combined Position Logic ===
longPosition = stochLongCondition and cmsLongCondition
shortPosition = stochShortCondition and cmsShortCondition


// === Money Management ===
capital = input.float(1000000, title="Capital ($)")  // your total capital
riskPercent = input.float(1, title="Risk % per trade") // how much % risk per trade
stopLossPoints = input.float(150, title="Stop Loss (Points)") // how many points your stop loss is
dollarPerPoint = input.float(10, title="Dollar per Point per Qty") // $10 per 1 qty

// === Calculate Qty based on Risk ===
// === Dynamic Qty Calculation ===
riskAmount = capital * (riskPercent / 100)
qty = riskAmount / (stopLossPoints * dollarPerPoint)
qtyRounded = math.round(qty)

// === Strategy Execution with Proper Management ===
if (longPosition)
    strategy.close("Short")         // Close existing short position if any
    strategy.entry("Long", strategy.long, qty=qtyRounded)  // Open long position
    strategy.exit("Long SL", from_entry="Long", loss=stopLossPoints)  // Auto stop loss

if (shortPosition)
    strategy.close("Long")          // Close existing long position if any
    strategy.entry("Short", strategy.short, qty=qtyRounded)  // Open short position
      strategy.exit("Short SL", from_entry="Short", loss=stopLossPoints)  // Auto stop loss
    //strategy.exit("Short SL", from_entry="Short", loss=150, profit=1000)  // Stop Loss 150 points

// === Optional: Plot Signal on Chart ===
//plotshape(longPosition, title="Long Signal", location=location.belowbar, color=color.green, style=shape.labelup, size=size.small)
//plotshape(shortPosition, title="Short Signal", location=location.abovebar, color=color.red, style=shape.labeldown, size=size.small)
