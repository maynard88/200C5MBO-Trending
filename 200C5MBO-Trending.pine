//@version=5
strategy("Gold Breakout Strategy (Improved Confirmation)", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=1)

// === Inputs ===
breakoutLookback = input.int(200, title="Breakout Lookback (candles)")
adxThreshold = input.int(25, title="ADX Threshold")
adxTf = input.timeframe("15", title="ADX Timeframe")
stopLossRR = input.float(2, title="Stop Loss Risk (ATR Multiplier)")
takeProfitRR = input.float(15, title="Take Profit Reward (ATR Multiplier)")

// === Breakout Detection (Updated Logic) ===
highestHigh = ta.highest(high, breakoutLookback)

// Breakout happens when close[2] breaks highestHigh[3]
breakoutHappened = close[2] > highestHigh[3]

// First confirmation candle: close[1] > close[2]
confirmCandle1 = close[1] > close[2]

// Second confirmation candle: close > close[1]
confirmCandle2 = close > close[1]

// Full breakout condition
breakoutCondition = breakoutHappened and confirmCandle1 and confirmCandle2

// === ADX Calculation on Higher Timeframe (Same as before) ===
length = 14
adxFunction() =>
    upMove = high - high[1]
    downMove = low[1] - low
    plusDM = (upMove > downMove and upMove > 0) ? upMove : 0
    minusDM = (downMove > upMove and downMove > 0) ? downMove : 0
    trur = ta.rma(ta.tr, length)
    plusDI = 100 * ta.rma(plusDM, length) / trur
    minusDI = 100 * ta.rma(minusDM, length) / trur
    dx = 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI)
    ta.rma(dx, length)

// Request ADX value on higher timeframe
adx = request.security(syminfo.tickerid, adxTf, adxFunction())
trendCondition = adx > adxThreshold

// === ATR Calculation (Same as before) ===
atr = ta.atr(14)

// === Entry Logic (Same as before) ===
canEnter = strategy.position_size == 0

if (breakoutCondition and trendCondition and canEnter)
    stopLossPrice = close[2] - (atr * stopLossRR)
    takeProfitPrice = close + (atr * takeProfitRR)
    
    strategy.entry("Long Breakout", strategy.long)
    strategy.exit("TP/SL", from_entry="Long Breakout", stop=stopLossPrice, limit=takeProfitPrice)

// === Plot for Reference (Same as before) ===
plot(highestHigh, color=color.red, title="Previous 200 High")
